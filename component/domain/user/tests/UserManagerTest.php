<?php

namespace tests\framework\http;

use PhpAcadem\domain\User\UserInterface;
use PhpAcadem\domain\User\UserManager;
use PHPUnit\Framework\TestCase;

class UserManagerTest extends TestCase
{
    /** @var \PDO */
    protected $pdo;

    public function testInterface(): void
    {
        $this->assertInstanceOf(UserManager::class, new UserManager($this->pdo));
    }

    public function testGetByIdFail(): void
    {
        $pdo = $this->createPdo();
        $userManager = new UserManager($pdo);
        $this->assertNull($userManager->getById(1));
    }

    /**
     * @return \PDO
     */
    protected function createPdo($fetch = null)
    {

        $pdo = $this->createMock(
            \PDO::class
        );
        $pdo->expects($this->any())
            ->method('prepare')
            ->will($this->returnCallback(function () use ($fetch) {
                return $this->createStatement($fetch);
            }));
        /** @var \PDO $pdo */
        return $pdo;
    }

    protected function createStatement($fetch = null)
    {
        $statement = $this->createMock(\PDOStatement::class);

        if ($fetch && is_array($fetch)) {
            $statement->expects($this->any())
                ->method('fetch')
                ->will($this->returnCallback(function () use ($fetch) {
                    return $fetch;
                }));
        }
        return $statement;
    }

    public function testGetByIdSuccess(): void
    {
        $userData = [
            'id' => 1,
            'name' => 'Name',
            'login' => 'Login',
        ];
        $pdo = $this->createPdo($userData);

        $userManager = new UserManager($pdo);

        $user = $userManager->getById(1);
        $this->assertInstanceOf(UserInterface::class, $user);
        $this->assertEquals($user->getId(), $userData['id']);
        $this->assertEquals($user->getName(), $userData['name']);
        $this->assertEquals($user->getLogin(), $userData['login']);
    }

    public function testGetByLoginFail(): void
    {
        $pdo = $this->createPdo();
        $userManager = new UserManager($pdo);
        $this->assertNull($userManager->getByLogin('Login'));
    }

    public function testGetByLoginSuccess(): void
    {
        $userData = [
            'id' => 1,
            'name' => 'Name',
            'login' => 'Login',
        ];
        $pdo = $this->createPdo($userData);

        $userManager = new UserManager($pdo);

        $user = $userManager->getByLogin('Login');
        $this->assertInstanceOf(UserInterface::class, $user);
        $this->assertEquals($user->getId(), $userData['id']);
        $this->assertEquals($user->getName(), $userData['name']);
        $this->assertEquals($user->getLogin(), $userData['login']);
    }

    public function testCreate(): void
    {
        $pdo = $this->createPdo();
        $userManager = new UserManager($pdo);
        $this->assertNull($userManager->create('Login', 'password', []));
    }

    protected function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->pdo = $this->createPdo();
    }
}